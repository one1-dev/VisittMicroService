/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RRule : IEquatable<RRule>
    {
        /// <summary>
        /// Frequency (DAILY, WEEKLY, MONTHLY)
        /// </summary>
        /// <value>Frequency (DAILY, WEEKLY, MONTHLY)</value>
        [DataMember(Name="freq", EmitDefaultValue=false)]
        public string? Freq { get; set; }

        /// <summary>
        /// Interval between inspections
        /// </summary>
        /// <value>Interval between inspections</value>
        [DataMember(Name="interval", EmitDefaultValue=true)]
        public int? Interval { get; set; }

        /// <summary>
        /// Days of month when inspection starts
        /// </summary>
        /// <value>Days of month when inspection starts</value>
        [DataMember(Name="bymonthday", EmitDefaultValue=false)]
        public List<int> Bymonthday { get; set; }

        /// <summary>
        /// Days of week when inspection starts (0-6)
        /// </summary>
        /// <value>Days of week when inspection starts (0-6)</value>
        [DataMember(Name="byweekday", EmitDefaultValue=false)]
        public List<int> Byweekday { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RRule {\n");
            sb.Append("  Freq: ").Append(Freq).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Bymonthday: ").Append(Bymonthday).Append("\n");
            sb.Append("  Byweekday: ").Append(Byweekday).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RRule)obj);
        }

        /// <summary>
        /// Returns true if RRule instances are equal
        /// </summary>
        /// <param name="other">Instance of RRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RRule other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Freq == other.Freq ||
                    Freq != null &&
                    Freq.Equals(other.Freq)
                ) && 
                (
                    Interval == other.Interval ||
                    
                    Interval.Equals(other.Interval)
                ) && 
                (
                    Bymonthday == other.Bymonthday ||
                    Bymonthday != null &&
                    other.Bymonthday != null &&
                    Bymonthday.SequenceEqual(other.Bymonthday)
                ) && 
                (
                    Byweekday == other.Byweekday ||
                    Byweekday != null &&
                    other.Byweekday != null &&
                    Byweekday.SequenceEqual(other.Byweekday)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Freq != null)
                    hashCode = hashCode * 59 + Freq.GetHashCode();
                    
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                    if (Bymonthday != null)
                    hashCode = hashCode * 59 + Bymonthday.GetHashCode();
                    if (Byweekday != null)
                    hashCode = hashCode * 59 + Byweekday.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RRule left, RRule right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RRule left, RRule right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
