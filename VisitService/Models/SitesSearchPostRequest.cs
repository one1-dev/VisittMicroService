/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SitesSearchPostRequest : IEquatable<SitesSearchPostRequest>
    {
        /// <summary>
        /// Number of items to return
        /// </summary>
        /// <value>Number of items to return</value>
        [Range(1, 1000)]
        [DataMember(Name="limit", EmitDefaultValue=true)]
        public int? Limit { get; set; } = 20;

        /// <summary>
        /// Number of items to skip
        /// </summary>
        /// <value>Number of items to skip</value>
        [DataMember(Name="skip", EmitDefaultValue=true)]
        public int? Skip { get; set; } = 0;

        /// <summary>
        /// Filter conditions for sites
        /// </summary>
        /// <value>Filter conditions for sites</value>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<SiteFilter> Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SitesSearchPostRequest {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SitesSearchPostRequest)obj);
        }

        /// <summary>
        /// Returns true if SitesSearchPostRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SitesSearchPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SitesSearchPostRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Limit == other.Limit ||
                    
                    Limit.Equals(other.Limit)
                ) && 
                (
                    Skip == other.Skip ||
                    
                    Skip.Equals(other.Skip)
                ) && 
                (
                    Filters == other.Filters ||
                    Filters != null &&
                    other.Filters != null &&
                    Filters.SequenceEqual(other.Filters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Limit.GetHashCode();
                    
                    hashCode = hashCode * 59 + Skip.GetHashCode();
                    if (Filters != null)
                    hashCode = hashCode * 59 + Filters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SitesSearchPostRequest left, SitesSearchPostRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SitesSearchPostRequest left, SitesSearchPostRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
