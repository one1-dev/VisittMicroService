/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CompletionPolicySettings : IEquatable<CompletionPolicySettings>
    {

        /// <summary>
        /// Type of completion policy
        /// </summary>
        /// <value>Type of completion policy</value>
        [TypeConverter(typeof(CustomEnumConverter<CompletionPolicyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CompletionPolicyEnum
        {
            
            /// <summary>
            /// Enum NextOccurrenceEnum for next_occurrence
            /// </summary>
            [EnumMember(Value = "next_occurrence")]
            NextOccurrenceEnum = 1,
            
            /// <summary>
            /// Enum IsoDurationEnum for iso_duration
            /// </summary>
            [EnumMember(Value = "iso_duration")]
            IsoDurationEnum = 2,
            
            /// <summary>
            /// Enum EndOfUnitEnum for end_of_unit
            /// </summary>
            [EnumMember(Value = "end_of_unit")]
            EndOfUnitEnum = 3
        }

        /// <summary>
        /// Type of completion policy
        /// </summary>
        /// <value>Type of completion policy</value>
        [DataMember(Name="completionPolicy", EmitDefaultValue=true)]
        public CompletionPolicyEnum CompletionPolicy { get; set; }

        /// <summary>
        /// ISO 8601 duration string
        /// </summary>
        /// <value>ISO 8601 duration string</value>
        [DataMember(Name="completionISODuration", EmitDefaultValue=false)]
        public string? CompletionISODuration { get; set; }


        /// <summary>
        /// End of unit for due date calculation
        /// </summary>
        /// <value>End of unit for due date calculation</value>
        [TypeConverter(typeof(CustomEnumConverter<CompletionEndOfUnitEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CompletionEndOfUnitEnum
        {
            
            /// <summary>
            /// Enum DayEnum for day
            /// </summary>
            [EnumMember(Value = "day")]
            DayEnum = 1,
            
            /// <summary>
            /// Enum WeekEnum for week
            /// </summary>
            [EnumMember(Value = "week")]
            WeekEnum = 2,
            
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 3,
            
            /// <summary>
            /// Enum YearEnum for year
            /// </summary>
            [EnumMember(Value = "year")]
            YearEnum = 4
        }

        /// <summary>
        /// End of unit for due date calculation
        /// </summary>
        /// <value>End of unit for due date calculation</value>
        [DataMember(Name="completionEndOfUnit", EmitDefaultValue=true)]
        public CompletionEndOfUnitEnum CompletionEndOfUnit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompletionPolicySettings {\n");
            sb.Append("  CompletionPolicy: ").Append(CompletionPolicy).Append("\n");
            sb.Append("  CompletionISODuration: ").Append(CompletionISODuration).Append("\n");
            sb.Append("  CompletionEndOfUnit: ").Append(CompletionEndOfUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CompletionPolicySettings)obj);
        }

        /// <summary>
        /// Returns true if CompletionPolicySettings instances are equal
        /// </summary>
        /// <param name="other">Instance of CompletionPolicySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompletionPolicySettings other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CompletionPolicy == other.CompletionPolicy ||
                    
                    CompletionPolicy.Equals(other.CompletionPolicy)
                ) && 
                (
                    CompletionISODuration == other.CompletionISODuration ||
                    CompletionISODuration != null &&
                    CompletionISODuration.Equals(other.CompletionISODuration)
                ) && 
                (
                    CompletionEndOfUnit == other.CompletionEndOfUnit ||
                    
                    CompletionEndOfUnit.Equals(other.CompletionEndOfUnit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CompletionPolicy.GetHashCode();
                    if (CompletionISODuration != null)
                    hashCode = hashCode * 59 + CompletionISODuration.GetHashCode();
                    
                    hashCode = hashCode * 59 + CompletionEndOfUnit.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CompletionPolicySettings left, CompletionPolicySettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CompletionPolicySettings left, CompletionPolicySettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
