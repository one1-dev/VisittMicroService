/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkOrderInput : IEquatable<WorkOrderInput>
    {
        /// <summary>
        /// Description of the work order
        /// </summary>
        /// <value>Description of the work order</value>
        [Required]
        [MaxLength(5000)]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Building ID for the work order
        /// </summary>
        /// <value>Building ID for the work order</value>
        [DataMember(Name="buildingId", EmitDefaultValue=false)]
        public string? BuildingId { get; set; }

        /// <summary>
        /// Site ID for the work order
        /// </summary>
        /// <value>Site ID for the work order</value>
        [DataMember(Name="siteId", EmitDefaultValue=false)]
        public string? SiteId { get; set; }

        /// <summary>
        /// Category ID for the work order
        /// </summary>
        /// <value>Category ID for the work order</value>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public string? CategoryId { get; set; }

        /// <summary>
        /// Sub-category ID for the work order
        /// </summary>
        /// <value>Sub-category ID for the work order</value>
        [DataMember(Name="subCategoryId", EmitDefaultValue=false)]
        public string? SubCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=true)]
        public WorkOrderPriorityEnum? Priority { get; set; }

        /// <summary>
        /// Media showing initial state
        /// </summary>
        /// <value>Media showing initial state</value>
        [DataMember(Name="defectMedia", EmitDefaultValue=false)]
        public List<MediaInput> DefectMedia { get; set; }

        /// <summary>
        /// Contact ID of the reporter
        /// </summary>
        /// <value>Contact ID of the reporter</value>
        [DataMember(Name="reporterContactId", EmitDefaultValue=false)]
        public string? ReporterContactId { get; set; }

        /// <summary>
        /// Tenant ID for the work order
        /// </summary>
        /// <value>Tenant ID for the work order</value>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string? TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkOrderInput {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BuildingId: ").Append(BuildingId).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  SubCategoryId: ").Append(SubCategoryId).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  DefectMedia: ").Append(DefectMedia).Append("\n");
            sb.Append("  ReporterContactId: ").Append(ReporterContactId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkOrderInput)obj);
        }

        /// <summary>
        /// Returns true if WorkOrderInput instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkOrderInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkOrderInput other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    BuildingId == other.BuildingId ||
                    BuildingId != null &&
                    BuildingId.Equals(other.BuildingId)
                ) && 
                (
                    SiteId == other.SiteId ||
                    SiteId != null &&
                    SiteId.Equals(other.SiteId)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    CategoryId != null &&
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    SubCategoryId == other.SubCategoryId ||
                    SubCategoryId != null &&
                    SubCategoryId.Equals(other.SubCategoryId)
                ) && 
                (
                    Priority == other.Priority ||
                    
                    Priority.Equals(other.Priority)
                ) && 
                (
                    DefectMedia == other.DefectMedia ||
                    DefectMedia != null &&
                    other.DefectMedia != null &&
                    DefectMedia.SequenceEqual(other.DefectMedia)
                ) && 
                (
                    ReporterContactId == other.ReporterContactId ||
                    ReporterContactId != null &&
                    ReporterContactId.Equals(other.ReporterContactId)
                ) && 
                (
                    TenantId == other.TenantId ||
                    TenantId != null &&
                    TenantId.Equals(other.TenantId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (BuildingId != null)
                    hashCode = hashCode * 59 + BuildingId.GetHashCode();
                    if (SiteId != null)
                    hashCode = hashCode * 59 + SiteId.GetHashCode();
                    if (CategoryId != null)
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (SubCategoryId != null)
                    hashCode = hashCode * 59 + SubCategoryId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (DefectMedia != null)
                    hashCode = hashCode * 59 + DefectMedia.GetHashCode();
                    if (ReporterContactId != null)
                    hashCode = hashCode * 59 + ReporterContactId.GetHashCode();
                    if (TenantId != null)
                    hashCode = hashCode * 59 + TenantId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkOrderInput left, WorkOrderInput right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkOrderInput left, WorkOrderInput right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
