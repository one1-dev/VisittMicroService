/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Charge : IEquatable<Charge>
    {
        /// <summary>
        /// Unique identifier for the charge
        /// </summary>
        /// <value>Unique identifier for the charge</value>
        [Required]
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ID of the billable item
        /// </summary>
        /// <value>ID of the billable item</value>
        [DataMember(Name="billableItemId", EmitDefaultValue=false)]
        public string? BillableItemId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public BillableItemTypeEnum Type { get; set; }

        /// <summary>
        /// Charge name/description
        /// </summary>
        /// <value>Charge name/description</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Charge code
        /// </summary>
        /// <value>Charge code</value>
        [DataMember(Name="chargeCode", EmitDefaultValue=false)]
        public string? ChargeCode { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public ChargeStatus Status { get; set; }

        /// <summary>
        /// Price excluding tax and markup
        /// </summary>
        /// <value>Price excluding tax and markup</value>
        [Required]
        [DataMember(Name="price", EmitDefaultValue=true)]
        public float Price { get; set; }

        /// <summary>
        /// Markup amount
        /// </summary>
        /// <value>Markup amount</value>
        [DataMember(Name="markup", EmitDefaultValue=true)]
        public float? Markup { get; set; }

        /// <summary>
        /// Gets or Sets MarkupUnit
        /// </summary>
        [DataMember(Name="markupUnit", EmitDefaultValue=true)]
        public MarkupUnitEnum MarkupUnit { get; set; }

        /// <summary>
        /// Whether charge is taxable
        /// </summary>
        /// <value>Whether charge is taxable</value>
        [Required]
        [DataMember(Name="taxable", EmitDefaultValue=true)]
        public bool Taxable { get; set; }

        /// <summary>
        /// Tax amount
        /// </summary>
        /// <value>Tax amount</value>
        [DataMember(Name="tax", EmitDefaultValue=true)]
        public float? Tax { get; set; }

        /// <summary>
        /// Quantity of items
        /// </summary>
        /// <value>Quantity of items</value>
        [Required]
        [DataMember(Name="quantity", EmitDefaultValue=true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Final price including tax, markup and quantity
        /// </summary>
        /// <value>Final price including tax, markup and quantity</value>
        [Required]
        [DataMember(Name="total", EmitDefaultValue=true)]
        public float Total { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public Tenant? Tenant { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrder
        /// </summary>
        [DataMember(Name="workOrder", EmitDefaultValue=false)]
        public WorkOrder? WorkOrder { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedAt
        /// </summary>
        [DataMember(Name="verifiedAt", EmitDefaultValue=true)]
        public DateTimeOffset? VerifiedAt { get; set; }

        /// <summary>
        /// ID of user who verified
        /// </summary>
        /// <value>ID of user who verified</value>
        [DataMember(Name="verifiedBy", EmitDefaultValue=false)]
        public string? VerifiedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Charge {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillableItemId: ").Append(BillableItemId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ChargeCode: ").Append(ChargeCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Markup: ").Append(Markup).Append("\n");
            sb.Append("  MarkupUnit: ").Append(MarkupUnit).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  WorkOrder: ").Append(WorkOrder).Append("\n");
            sb.Append("  VerifiedAt: ").Append(VerifiedAt).Append("\n");
            sb.Append("  VerifiedBy: ").Append(VerifiedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Charge)obj);
        }

        /// <summary>
        /// Returns true if Charge instances are equal
        /// </summary>
        /// <param name="other">Instance of Charge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Charge other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BillableItemId == other.BillableItemId ||
                    BillableItemId != null &&
                    BillableItemId.Equals(other.BillableItemId)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ChargeCode == other.ChargeCode ||
                    ChargeCode != null &&
                    ChargeCode.Equals(other.ChargeCode)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    Markup == other.Markup ||
                    
                    Markup.Equals(other.Markup)
                ) && 
                (
                    MarkupUnit == other.MarkupUnit ||
                    
                    MarkupUnit.Equals(other.MarkupUnit)
                ) && 
                (
                    Taxable == other.Taxable ||
                    
                    Taxable.Equals(other.Taxable)
                ) && 
                (
                    Tax == other.Tax ||
                    
                    Tax.Equals(other.Tax)
                ) && 
                (
                    Quantity == other.Quantity ||
                    
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    Total == other.Total ||
                    
                    Total.Equals(other.Total)
                ) && 
                (
                    Tenant == other.Tenant ||
                    Tenant != null &&
                    Tenant.Equals(other.Tenant)
                ) && 
                (
                    WorkOrder == other.WorkOrder ||
                    WorkOrder != null &&
                    WorkOrder.Equals(other.WorkOrder)
                ) && 
                (
                    VerifiedAt == other.VerifiedAt ||
                    
                    VerifiedAt.Equals(other.VerifiedAt)
                ) && 
                (
                    VerifiedBy == other.VerifiedBy ||
                    VerifiedBy != null &&
                    VerifiedBy.Equals(other.VerifiedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BillableItemId != null)
                    hashCode = hashCode * 59 + BillableItemId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ChargeCode != null)
                    hashCode = hashCode * 59 + ChargeCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    
                    hashCode = hashCode * 59 + Markup.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarkupUnit.GetHashCode();
                    
                    hashCode = hashCode * 59 + Taxable.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                    
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (Tenant != null)
                    hashCode = hashCode * 59 + Tenant.GetHashCode();
                    if (WorkOrder != null)
                    hashCode = hashCode * 59 + WorkOrder.GetHashCode();
                    
                    hashCode = hashCode * 59 + VerifiedAt.GetHashCode();
                    if (VerifiedBy != null)
                    hashCode = hashCode * 59 + VerifiedBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Charge left, Charge right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Charge left, Charge right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
