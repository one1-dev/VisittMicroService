/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Contact : IEquatable<Contact>
    {
        /// <summary>
        /// Unique identifier for the contact
        /// </summary>
        /// <value>Unique identifier for the contact</value>
        [Required]
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the contact
        /// </summary>
        /// <value>Name of the contact</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Phone of the contact
        /// </summary>
        /// <value>Phone of the contact</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string? Phone { get; set; }

        /// <summary>
        /// Email of the contact
        /// </summary>
        /// <value>Email of the contact</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string? Email { get; set; }

        /// <summary>
        /// Additional information about the contact
        /// </summary>
        /// <value>Additional information about the contact</value>
        [DataMember(Name="extraInfo", EmitDefaultValue=false)]
        public string? ExtraInfo { get; set; }

        /// <summary>
        /// Roles of the contact
        /// </summary>
        /// <value>Roles of the contact</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<RolesEnum> Roles { get; set; }

        /// <summary>
        /// Whether the contact is archived
        /// </summary>
        /// <value>Whether the contact is archived</value>
        [DataMember(Name="isArchived", EmitDefaultValue=true)]
        public bool? IsArchived { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public Tenant? Tenant { get; set; }

        /// <summary>
        /// Gets or Sets Tenants
        /// </summary>
        [DataMember(Name="tenants", EmitDefaultValue=false)]
        public List<Tenant> Tenants { get; set; }

        /// <summary>
        /// Gets or Sets Integrations
        /// </summary>
        [DataMember(Name="integrations", EmitDefaultValue=false)]
        public List<EntityIntegration> Integrations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExtraInfo: ").Append(ExtraInfo).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  Tenants: ").Append(Tenants).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Contact)obj);
        }

        /// <summary>
        /// Returns true if Contact instances are equal
        /// </summary>
        /// <param name="other">Instance of Contact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    ExtraInfo == other.ExtraInfo ||
                    ExtraInfo != null &&
                    ExtraInfo.Equals(other.ExtraInfo)
                ) && 
                (
                    Roles == other.Roles ||
                    Roles != null &&
                    other.Roles != null &&
                    Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    IsArchived == other.IsArchived ||
                    
                    IsArchived.Equals(other.IsArchived)
                ) && 
                (
                    Tenant == other.Tenant ||
                    Tenant != null &&
                    Tenant.Equals(other.Tenant)
                ) && 
                (
                    Tenants == other.Tenants ||
                    Tenants != null &&
                    other.Tenants != null &&
                    Tenants.SequenceEqual(other.Tenants)
                ) && 
                (
                    Integrations == other.Integrations ||
                    Integrations != null &&
                    other.Integrations != null &&
                    Integrations.SequenceEqual(other.Integrations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (ExtraInfo != null)
                    hashCode = hashCode * 59 + ExtraInfo.GetHashCode();
                    if (Roles != null)
                    hashCode = hashCode * 59 + Roles.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsArchived.GetHashCode();
                    if (Tenant != null)
                    hashCode = hashCode * 59 + Tenant.GetHashCode();
                    if (Tenants != null)
                    hashCode = hashCode * 59 + Tenants.GetHashCode();
                    if (Integrations != null)
                    hashCode = hashCode * 59 + Integrations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Contact left, Contact right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Contact left, Contact right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
