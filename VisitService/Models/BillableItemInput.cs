/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillableItemInput : IEquatable<BillableItemInput>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public BillableItemTypeEnum Type { get; set; }

        /// <summary>
        /// Name or description of billable item
        /// </summary>
        /// <value>Name or description of billable item</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Price of billable item
        /// </summary>
        /// <value>Price of billable item</value>
        [Required]
        [DataMember(Name="price", EmitDefaultValue=true)]
        public float Price { get; set; }

        /// <summary>
        /// Markup to apply
        /// </summary>
        /// <value>Markup to apply</value>
        [DataMember(Name="markup", EmitDefaultValue=true)]
        public float? Markup { get; set; }

        /// <summary>
        /// Gets or Sets MarkupUnit
        /// </summary>
        [DataMember(Name="markupUnit", EmitDefaultValue=true)]
        public MarkupUnitEnum MarkupUnit { get; set; }

        /// <summary>
        /// Charge code
        /// </summary>
        /// <value>Charge code</value>
        [DataMember(Name="chargeCode", EmitDefaultValue=false)]
        public string? ChargeCode { get; set; }

        /// <summary>
        /// Whether item is active
        /// </summary>
        /// <value>Whether item is active</value>
        [DataMember(Name="active", EmitDefaultValue=true)]
        public bool? Active { get; set; }

        /// <summary>
        /// Whether item is archived
        /// </summary>
        /// <value>Whether item is archived</value>
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public bool? Archived { get; set; }

        /// <summary>
        /// Whether item is taxable
        /// </summary>
        /// <value>Whether item is taxable</value>
        [DataMember(Name="taxable", EmitDefaultValue=true)]
        public bool? Taxable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillableItemInput {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Markup: ").Append(Markup).Append("\n");
            sb.Append("  MarkupUnit: ").Append(MarkupUnit).Append("\n");
            sb.Append("  ChargeCode: ").Append(ChargeCode).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillableItemInput)obj);
        }

        /// <summary>
        /// Returns true if BillableItemInput instances are equal
        /// </summary>
        /// <param name="other">Instance of BillableItemInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillableItemInput other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    Markup == other.Markup ||
                    
                    Markup.Equals(other.Markup)
                ) && 
                (
                    MarkupUnit == other.MarkupUnit ||
                    
                    MarkupUnit.Equals(other.MarkupUnit)
                ) && 
                (
                    ChargeCode == other.ChargeCode ||
                    ChargeCode != null &&
                    ChargeCode.Equals(other.ChargeCode)
                ) && 
                (
                    Active == other.Active ||
                    
                    Active.Equals(other.Active)
                ) && 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    Taxable == other.Taxable ||
                    
                    Taxable.Equals(other.Taxable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    
                    hashCode = hashCode * 59 + Markup.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarkupUnit.GetHashCode();
                    if (ChargeCode != null)
                    hashCode = hashCode * 59 + ChargeCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    
                    hashCode = hashCode * 59 + Taxable.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillableItemInput left, BillableItemInput right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillableItemInput left, BillableItemInput right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
