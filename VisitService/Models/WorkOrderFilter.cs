/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// Filter parameters for work orders query
    /// </summary>
    [DataContract]
    public partial class WorkOrderFilter : IEquatable<WorkOrderFilter>
    {
        /// <summary>
        /// Filter by work order ID
        /// </summary>
        /// <value>Filter by work order ID</value>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public FilterIdStringArray? Id { get; set; }

        /// <summary>
        /// Filter by sub-category ID
        /// </summary>
        /// <value>Filter by sub-category ID</value>
        [DataMember(Name="subCategoryId", EmitDefaultValue=false)]
        public FilterIdStringArray? SubCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public WorkOrderStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=true)]
        public WorkOrderPriorityEnum? Priority { get; set; }

        /// <summary>
        /// Filter by building ID
        /// </summary>
        /// <value>Filter by building ID</value>
        [DataMember(Name="buildingId", EmitDefaultValue=false)]
        public FilterIdStringArray? BuildingId { get; set; }

        /// <summary>
        /// Filter by site ID
        /// </summary>
        /// <value>Filter by site ID</value>
        [DataMember(Name="siteId", EmitDefaultValue=false)]
        public FilterIdStringArray? SiteId { get; set; }

        /// <summary>
        /// Filter by category ID
        /// </summary>
        /// <value>Filter by category ID</value>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public FilterIdStringArray? CategoryId { get; set; }

        /// <summary>
        /// Filter by contact ID
        /// </summary>
        /// <value>Filter by contact ID</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public FilterIdStringArray? ContactId { get; set; }

        /// <summary>
        /// Filter by tenant ID
        /// </summary>
        /// <value>Filter by tenant ID</value>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public FilterIdStringArray? TenantId { get; set; }

        /// <summary>
        /// Filter by assigned user ID
        /// </summary>
        /// <value>Filter by assigned user ID</value>
        [DataMember(Name="assignedUserIds", EmitDefaultValue=false)]
        public FilterIdStringArray? AssignedUserIds { get; set; }

        /// <summary>
        /// Filter by work order type
        /// </summary>
        /// <value>Filter by work order type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public FilterStringArray? Type { get; set; }

        /// <summary>
        /// Filter by creation date
        /// </summary>
        /// <value>Filter by creation date</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public FilterDate? CreatedAt { get; set; }

        /// <summary>
        /// Filter by due date
        /// </summary>
        /// <value>Filter by due date</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public FilterDate? DueDate { get; set; }

        /// <summary>
        /// Filter by completion date
        /// </summary>
        /// <value>Filter by completion date</value>
        [DataMember(Name="completedAt", EmitDefaultValue=false)]
        public FilterDate? CompletedAt { get; set; }

        /// <summary>
        /// Filter by last update date
        /// </summary>
        /// <value>Filter by last update date</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public FilterDate? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkOrderFilter {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubCategoryId: ").Append(SubCategoryId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  BuildingId: ").Append(BuildingId).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  AssignedUserIds: ").Append(AssignedUserIds).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkOrderFilter)obj);
        }

        /// <summary>
        /// Returns true if WorkOrderFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkOrderFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkOrderFilter other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    SubCategoryId == other.SubCategoryId ||
                    SubCategoryId != null &&
                    SubCategoryId.Equals(other.SubCategoryId)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Priority == other.Priority ||
                    
                    Priority.Equals(other.Priority)
                ) && 
                (
                    BuildingId == other.BuildingId ||
                    BuildingId != null &&
                    BuildingId.Equals(other.BuildingId)
                ) && 
                (
                    SiteId == other.SiteId ||
                    SiteId != null &&
                    SiteId.Equals(other.SiteId)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    CategoryId != null &&
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    ContactId == other.ContactId ||
                    ContactId != null &&
                    ContactId.Equals(other.ContactId)
                ) && 
                (
                    TenantId == other.TenantId ||
                    TenantId != null &&
                    TenantId.Equals(other.TenantId)
                ) && 
                (
                    AssignedUserIds == other.AssignedUserIds ||
                    AssignedUserIds != null &&
                    AssignedUserIds.Equals(other.AssignedUserIds)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    CompletedAt == other.CompletedAt ||
                    CompletedAt != null &&
                    CompletedAt.Equals(other.CompletedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (SubCategoryId != null)
                    hashCode = hashCode * 59 + SubCategoryId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (BuildingId != null)
                    hashCode = hashCode * 59 + BuildingId.GetHashCode();
                    if (SiteId != null)
                    hashCode = hashCode * 59 + SiteId.GetHashCode();
                    if (CategoryId != null)
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (ContactId != null)
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                    if (TenantId != null)
                    hashCode = hashCode * 59 + TenantId.GetHashCode();
                    if (AssignedUserIds != null)
                    hashCode = hashCode * 59 + AssignedUserIds.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (CompletedAt != null)
                    hashCode = hashCode * 59 + CompletedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkOrderFilter left, WorkOrderFilter right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkOrderFilter left, WorkOrderFilter right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
