/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// Filter for date fields with comparison operators
    /// </summary>
    [DataContract]
    public partial class FilterDate : IEquatable<FilterDate>
    {
        /// <summary>
        /// Equal to a given date
        /// </summary>
        /// <value>Equal to a given date</value>
        /* <example>2024-01-01T00:00:00Z</example> */
        [DataMember(Name="eq", EmitDefaultValue=true)]
        public DateTimeOffset? Eq { get; set; }

        /// <summary>
        /// Not equal to a given date
        /// </summary>
        /// <value>Not equal to a given date</value>
        [DataMember(Name="neq", EmitDefaultValue=true)]
        public DateTimeOffset? Neq { get; set; }

        /// <summary>
        /// Greater than a given date
        /// </summary>
        /// <value>Greater than a given date</value>
        /* <example>2024-01-01T00:00:00Z</example> */
        [DataMember(Name="gt", EmitDefaultValue=true)]
        public DateTimeOffset? Gt { get; set; }

        /// <summary>
        /// Greater than or equal to a given date
        /// </summary>
        /// <value>Greater than or equal to a given date</value>
        [DataMember(Name="gte", EmitDefaultValue=true)]
        public DateTimeOffset? Gte { get; set; }

        /// <summary>
        /// Less than a given date
        /// </summary>
        /// <value>Less than a given date</value>
        [DataMember(Name="lt", EmitDefaultValue=true)]
        public DateTimeOffset? Lt { get; set; }

        /// <summary>
        /// Less than or equal to a given date
        /// </summary>
        /// <value>Less than or equal to a given date</value>
        /* <example>2024-12-31T23:59:59Z</example> */
        [DataMember(Name="lte", EmitDefaultValue=true)]
        public DateTimeOffset? Lte { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterDate {\n");
            sb.Append("  Eq: ").Append(Eq).Append("\n");
            sb.Append("  Neq: ").Append(Neq).Append("\n");
            sb.Append("  Gt: ").Append(Gt).Append("\n");
            sb.Append("  Gte: ").Append(Gte).Append("\n");
            sb.Append("  Lt: ").Append(Lt).Append("\n");
            sb.Append("  Lte: ").Append(Lte).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FilterDate)obj);
        }

        /// <summary>
        /// Returns true if FilterDate instances are equal
        /// </summary>
        /// <param name="other">Instance of FilterDate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterDate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Eq == other.Eq ||
                    
                    Eq.Equals(other.Eq)
                ) && 
                (
                    Neq == other.Neq ||
                    
                    Neq.Equals(other.Neq)
                ) && 
                (
                    Gt == other.Gt ||
                    
                    Gt.Equals(other.Gt)
                ) && 
                (
                    Gte == other.Gte ||
                    
                    Gte.Equals(other.Gte)
                ) && 
                (
                    Lt == other.Lt ||
                    
                    Lt.Equals(other.Lt)
                ) && 
                (
                    Lte == other.Lte ||
                    
                    Lte.Equals(other.Lte)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Eq.GetHashCode();
                    
                    hashCode = hashCode * 59 + Neq.GetHashCode();
                    
                    hashCode = hashCode * 59 + Gt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Gte.GetHashCode();
                    
                    hashCode = hashCode * 59 + Lt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Lte.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FilterDate left, FilterDate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FilterDate left, FilterDate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
