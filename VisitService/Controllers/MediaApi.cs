/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MediaApiController : ControllerBase
    { 
        /// <summary>
        /// Get media information
        /// </summary>
        /// <param name="mediaId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/media/{mediaId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("MediaMediaIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Media), description: "Successful response")]
        public virtual async Task<IActionResult> MediaMediaIdGet([FromRoute (Name = "mediaId")][Required]string mediaId, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Media));
            string exampleJson = null;
            exampleJson = "{\n  \"filename\" : \"filename\",\n  \"bytes\" : 0,\n  \"format\" : \"format\",\n  \"mediaId\" : \"mediaId\",\n  \"thumbUrl\" : \"thumbUrl\",\n  \"url\" : \"url\",\n  \"resourceType\" : \"resourceType\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Media>(exampleJson)
            : default(Media);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Upload files
        /// </summary>
        /// <remarks>Upload files using multipart/form-data. Max 20MB per file, max 10 files per request.</remarks>
        /// <param name="files"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Files uploaded successfully</response>
        /// <response code="400">Bad request (file too large, too many files, unsupported format)</response>
        /// <response code="413">Payload too large</response>
        /// <response code="429">Rate limit exceeded</response>
        [HttpPost]
        [Route("/media/upload")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("MediaUploadPost")]
        public virtual async Task<IActionResult> MediaUploadPost([FromForm (Name = "files")][Required()]List<System.IO.Stream> files, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 413 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(413);
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);

            throw new NotImplementedException();
        }
    }
}
