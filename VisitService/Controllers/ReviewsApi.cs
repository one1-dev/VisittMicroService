/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReviewsApiController : ControllerBase
    { 
        /// <summary>
        /// Get list of reviews
        /// </summary>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        /// <param name="workOrderId">Filter by work order ID</param>
        /// <param name="createdAtFrom">Filter by creation date from</param>
        /// <param name="createdAtTo">Filter by creation date to</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/reviews")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ReviewsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReviewsPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> ReviewsGet([FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "workOrderId")]string workOrderId, [FromQuery (Name = "createdAtFrom")]DateTime? createdAtFrom, [FromQuery (Name = "createdAtTo")]DateTime? createdAtTo, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReviewsPaginated));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ReviewsPaginated>(exampleJson)
            : default(ReviewsPaginated);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get review by ID
        /// </summary>
        /// <param name="reviewId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/reviews/{reviewId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ReviewsReviewIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Review), description: "Successful response")]
        public virtual async Task<IActionResult> ReviewsReviewIdGet([FromRoute (Name = "reviewId")][Required]string reviewId, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Review));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Review>(exampleJson)
            : default(Review);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get reviews for work order
        /// </summary>
        /// <param name="workOrderId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/work-orders/{workOrderId}/reviews")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("WorkOrdersWorkOrderIdReviewsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Review>), description: "Successful response")]
        public virtual async Task<IActionResult> WorkOrdersWorkOrderIdReviewsGet([FromRoute (Name = "workOrderId")][Required]string workOrderId, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Review>));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Review>>(exampleJson)
            : default(List<Review>);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }
    }
}
