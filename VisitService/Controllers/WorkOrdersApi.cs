/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;
using VisitService.Services;

namespace VisitService.Controllers;

    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WorkOrdersApiController(IWorkOrdersService workOrdersService) : ControllerBase
    
    { 
        /// <summary>
        /// Update multiple work orders
        /// </summary>
        /// <param name="workOrdersBulkPutRequest"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Work orders updated successfully</response>
        [HttpPut]
        [Route("/work-orders/bulk")]
        // [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("WorkOrdersBulkPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<WorkOrder>), description: "Work orders updated successfully")]
        public virtual async Task<IActionResult> WorkOrdersBulkPut([FromBody]WorkOrdersBulkPutRequest workOrdersBulkPutRequest, CancellationToken cancellationToken)
            => Ok(await workOrdersService.WorkOrdersBulkPut(workOrdersBulkPutRequest, cancellationToken));


        /// <summary>
        /// Get list of work orders
        /// </summary>
        /// <remarks>Get work orders. Sorted descending by created date.</remarks>
        /// <param name="skip">Number of items to skip for pagination</param>
        /// <param name="limit">Maximum number of items to return</param>
        /// <param name="filters">Filter conditions for work orders</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">List of work orders retrieved successfully</response>
        [HttpGet]
        [Route("/work-orders")]
        // [Authorize]
        [ValidateModelState]
        [SwaggerOperation("WorkOrdersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkOrdersPaginated),
            description: "List of work orders retrieved successfully")]
        public virtual async Task<IActionResult> WorkOrdersGet([FromQuery(Name = "skip")] int? skip,
            [FromQuery(Name = "limit")] [Range(1, 1000)] int? limit,
            [FromQuery(Name = "filters")] WorkOrderFilter? filters, CancellationToken cancellationToken)
            => Ok(await workOrdersService.WorkOrdersGet(filters, cancellationToken, skip ??=0, limit ??= 20));
        
        /// <summary>
        /// Create new work order
        /// </summary>
        /// <param name="workOrderInput"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="201">Work order created successfully</response>
        [HttpPost]
        [Route("/work-orders")]
        // [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("WorkOrdersPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(WorkOrder), description: "Work order created successfully")]
        public virtual async Task<IActionResult> WorkOrdersPost([FromBody]WorkOrderInput workOrderInput, CancellationToken cancellationToken)
            => Ok(await workOrdersService.WorkOrdersPost(workOrderInput, cancellationToken));

        /// <summary>
        /// Get work order by ID
        /// </summary>
        /// <param name="workOrderId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/work-orders/{workOrderId}")]
        // [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetWorkOrderByIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkOrder), description: "Successful response")]
        public virtual async Task<IActionResult> WorkOrdersWorkOrderIdGet([FromRoute (Name = "workOrderId")][Required]string workOrderId, CancellationToken cancellationToken)
            => Ok(await workOrdersService.GetWorkOrderByIdGet(workOrderId, cancellationToken));


        /// <summary>
        /// Update work order
        /// </summary>
        /// <param name="workOrderId"></param>
        /// <param name="workOrderUpdateInput"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Work order updated successfully</response>
        [HttpPut]
        [Route("/work-orders/{workOrderId}")]
        // [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("WorkOrdersWorkOrderIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkOrder), description: "Work order updated successfully")]
        public virtual async Task<IActionResult> WorkOrdersWorkOrderIdPut([FromRoute (Name = "workOrderId")][Required]string workOrderId, [FromBody]WorkOrderUpdateInput workOrderUpdateInput, CancellationToken cancellationToken)
            => Ok(await workOrdersService.WorkOrdersWorkOrderIdPut(workOrderId,workOrderUpdateInput, cancellationToken));

    }

