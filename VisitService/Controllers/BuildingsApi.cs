/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;
using VisitService.Services;
using VisitService.Services.Interfaces;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BuildingsApiController(IBuildingService buildingService) : ControllerBase
    {
        /// <summary>
        /// Get building by ID
        /// </summary>
        /// <param name="buildingId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/buildings/{buildingId}")]
        // [Authorize]
        [ValidateModelState]
        [SwaggerOperation("BuildingsBuildingIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Building), description: "Successful response")]
        public virtual async Task<IActionResult> BuildingsBuildingIdGet(
            [FromRoute(Name = "buildingId")] [Required] string buildingId, CancellationToken cancellationToken)
            => Ok(await buildingService.GetBuildingById(buildingId, cancellationToken));

        /// <summary>
        /// Get sites in building
        /// </summary>
        /// <param name="buildingId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/buildings/{buildingId}/sites")]
        // [Authorize]
        [ValidateModelState]
        [SwaggerOperation("BuildingsBuildingIdSitesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SitesPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> BuildingsBuildingIdSitesGet([FromRoute (Name = "buildingId")][Required]string buildingId, [FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "limit")]int? limit, CancellationToken cancellationToken)
            => Ok(await buildingService.GetSitesByBuildingId(buildingId,skip ??=0,limit ??=20 , cancellationToken));


        /// <summary>
        /// Get list of buildings
        /// </summary>
        /// <remarks>Retrieve a paginated list of buildings with optional filters</remarks>
        /// <param name="skip">Number of items to skip for pagination</param>
        /// <param name="limit">Maximum number of items to return</param>
        /// <param name="buildingFilter">Filter conditions for buildings</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpPost]
        [Route("/buildings")]
        // [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("BuildingsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(BuildingsPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> BuildingsPost([FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "limit")][Range(1, 1000)]int? limit, [FromBody]BuildingFilter? buildingFilter, CancellationToken cancellationToken)
            =>Ok(await buildingService.GetBuildings(buildingFilter,skip ??=0,limit ??=20 , cancellationToken));
        
    }
}
