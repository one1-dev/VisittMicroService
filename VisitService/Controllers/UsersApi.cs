/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;
using VisitService.Services.Interfaces;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController(IUserService userService) : ControllerBase
    { 
        /// <summary>
        /// Search users with filters
        /// </summary>
        /// <remarks>Search users using complex filter combinations</remarks>
        /// <param name="usersPostRequest"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Users retrieved successfully</response>
        [HttpPost]
        [Route("/users")]
        // [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UsersPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsersPaginated), description: "Users retrieved successfully")]
        public virtual async Task<IActionResult> UsersPost([FromBody]UsersPostRequest? usersPostRequest, CancellationToken cancellationToken)
        {
            var limit = usersPostRequest?.Limit ?? 20;
            var skip = usersPostRequest?.Skip ?? 0;
            var filters = usersPostRequest?.Filters;
            return Ok(await userService.GetUsers(skip, limit, filters, cancellationToken));
        }

        /// <summary>
        /// Get user by ID
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/users/{userId}")]
        // [Authorize]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Successful response")]
        public virtual async Task<IActionResult> UsersUserIdGet([FromRoute (Name = "userId")][Required]string userId, CancellationToken cancellationToken)
        {
            return Ok(await userService.GetUserById(userId, cancellationToken));
        }
    }
}
