/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using VisitService.Attributes;
using VisitService.Models;
using VisitService.Services.Interfaces;

namespace VisitService.Controllers;
/// <summary>
/// 
/// </summary>
[ApiController]
public class TenantsApiController(ITenantService tenantService) : ControllerBase
{ 
    

    /// <summary>
    /// Create new tenant
    /// </summary>
    /// <param name="tenantInput"></param>
    /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
    /// <response code="201">Tenant created successfully</response>
    [HttpPost]
    [Route("/tenants")]
    // [Authorize]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("TenantsPost")]
    [SwaggerResponse(statusCode: 201, type: typeof(Tenant), description: "Tenant created successfully")]
    public virtual async Task<IActionResult> TenantsPost([FromBody]TenantInput tenantInput, CancellationToken cancellationToken)
        =>  Ok(await tenantService.CreateTenant(tenantInput, cancellationToken));


    /// <summary>
    /// Get list of contacts
    /// </summary>
    /// <param name="tenantsSearchPostRequest"></param>
    /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
    /// <response code="200">Successful response</response>
    [HttpPost]
    [Route("/tenants/search")]
    // [Authorize]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("TenantsSearchPost")]
    [SwaggerResponse(statusCode: 200, type: typeof(TenantsPaginated), description: "Successful response")]
    public virtual async Task<IActionResult> TenantsSearchPost([FromBody]TenantsSearchPostRequest? tenantsSearchPostRequest, CancellationToken cancellationToken)
    {
        var limit = tenantsSearchPostRequest?.Limit ?? 20;
        var skip = tenantsSearchPostRequest?.Skip ?? 0;
        var filters = tenantsSearchPostRequest?.Filters;
        return Ok(await tenantService.GetTenants(limit, skip, filters, cancellationToken));
    }

    /// <summary>
    /// Archive or unarchive tenant
    /// </summary>
    /// <param name="tenantId"></param>
    /// <param name="archive"></param>
    /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
    /// <response code="200">Tenant archive status updated</response>
    [HttpDelete]
    [Route("/tenants/{tenantId}/archive")]
    // [Authorize]
    [ValidateModelState]
    [SwaggerOperation("TenantsTenantIdArchiveDelete")]
    [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "Tenant archive status updated")]
    public virtual async Task<IActionResult> TenantsTenantIdArchiveDelete([FromRoute (Name = "tenantId")][Required]string tenantId, [FromQuery (Name = "archive")][Required()]bool archive, CancellationToken cancellationToken)
        => Ok(await tenantService.ArchiveTenant(tenantId, archive, cancellationToken));

    /// <summary>
    /// Get tenant by ID
    /// </summary>
    /// <param name="tenantId"></param>
    /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
    /// <response code="200">Successful response</response>
    [HttpGet]
    [Route("/tenants/{tenantId}")]
    // [Authorize]
    [ValidateModelState]
    [SwaggerOperation("TenantsTenantIdGet")]
    [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "Successful response")]
    public virtual async Task<IActionResult> TenantsTenantIdGet([FromRoute (Name = "tenantId")][Required]string tenantId, CancellationToken cancellationToken)
        => Ok(await tenantService.GetTenantById(tenantId, cancellationToken));

    /// <summary>
    /// Update tenant
    /// </summary>
    /// <param name="tenantId"></param>
    /// <param name="tenantInput"></param>
    /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
    /// <response code="200">Tenant updated successfully</response>
    [HttpPut]
    [Route("/tenants/{tenantId}")]
    // [Authorize]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("TenantsTenantIdPut")]
    [SwaggerResponse(statusCode: 200, type: typeof(Tenant), description: "Tenant updated successfully")]
    public virtual async Task<IActionResult> TenantsTenantIdPut([FromRoute (Name = "tenantId")][Required]string tenantId, [FromBody]TenantInput tenantInput, CancellationToken cancellationToken)
        => Ok(await tenantService.UpdateTenant(tenantId, tenantInput, cancellationToken));
}

