/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CategoriesApiController : ControllerBase
    { 
        /// <summary>
        /// Get category by ID
        /// </summary>
        /// <remarks>Get category with its sub-categories</remarks>
        /// <param name="categoryId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/categories/{categoryId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("CategoriesCategoryIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Category), description: "Successful response")]
        public virtual async Task<IActionResult> CategoriesCategoryIdGet([FromRoute (Name = "categoryId")][Required]string categoryId, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Category));
            string exampleJson = null;
            exampleJson = "{\n  \"color\" : \"color\",\n  \"name\" : \"name\",\n  \"_id\" : \"_id\",\n  \"subCategories\" : [ null, null ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Category>(exampleJson)
            : default(Category);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get list of categories
        /// </summary>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/categories")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("CategoriesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CategoriesPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> CategoriesGet([FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "limit")]int? limit, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CategoriesPaginated));
            string exampleJson = null;
            exampleJson = "{\n  \"pageInfo\" : {\n    \"limit\" : 1,\n    \"hasNext\" : true,\n    \"skip\" : 6,\n    \"totalCount\" : 0\n  },\n  \"items\" : [ {\n    \"color\" : \"color\",\n    \"name\" : \"name\",\n    \"_id\" : \"_id\",\n    \"subCategories\" : [ null, null ]\n  }, {\n    \"color\" : \"color\",\n    \"name\" : \"name\",\n    \"_id\" : \"_id\",\n    \"subCategories\" : [ null, null ]\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CategoriesPaginated>(exampleJson)
            : default(CategoriesPaginated);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }
    }
}
