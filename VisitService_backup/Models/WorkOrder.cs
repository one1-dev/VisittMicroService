/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkOrder : IEquatable<WorkOrder>
    {
        /// <summary>
        /// Unique identifier for the work order
        /// </summary>
        /// <value>Unique identifier for the work order</value>
        [Required]
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Running number for work orders
        /// </summary>
        /// <value>Running number for work orders</value>
        [Required]
        [DataMember(Name="sequence", EmitDefaultValue=true)]
        public int Sequence { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=true)]
        public WorkOrderPriorityEnum? Priority { get; set; }

        /// <summary>
        /// Source of the work order creation
        /// </summary>
        /// <value>Source of the work order creation</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string? Source { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public WorkOrderStatus? Status { get; set; }

        /// <summary>
        /// Text update for the last status change
        /// </summary>
        /// <value>Text update for the last status change</value>
        [DataMember(Name="statusText", EmitDefaultValue=false)]
        public string? StatusText { get; set; }

        /// <summary>
        /// Description of the work order
        /// </summary>
        /// <value>Description of the work order</value>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AssignedUsers
        /// </summary>
        [DataMember(Name="assignedUsers", EmitDefaultValue=false)]
        public List<User> AssignedUsers { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public Property? Property { get; set; }

        /// <summary>
        /// Gets or Sets Building
        /// </summary>
        [DataMember(Name="building", EmitDefaultValue=false)]
        public Building? Building { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public Site? Site { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public Category? Category { get; set; }

        /// <summary>
        /// Gets or Sets SubCategory
        /// </summary>
        [DataMember(Name="subCategory", EmitDefaultValue=false)]
        public Category? SubCategory { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<Contact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public Tenant? Tenant { get; set; }

        /// <summary>
        /// Media showing initial state
        /// </summary>
        /// <value>Media showing initial state</value>
        [DataMember(Name="defectMedia", EmitDefaultValue=false)]
        public List<Media> DefectMedia { get; set; }

        /// <summary>
        /// Media showing final state
        /// </summary>
        /// <value>Media showing final state</value>
        [DataMember(Name="repairMedia", EmitDefaultValue=false)]
        public List<Media> RepairMedia { get; set; }

        /// <summary>
        /// Due date for the work order
        /// </summary>
        /// <value>Due date for the work order</value>
        [DataMember(Name="dueDate", EmitDefaultValue=true)]
        public DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        /// <value>Creation timestamp</value>
        [Required]
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByActor
        /// </summary>
        [DataMember(Name="createdByActor", EmitDefaultValue=false)]
        public Actor? CreatedByActor { get; set; }

        /// <summary>
        /// Gets or Sets ReporterContact
        /// </summary>
        [DataMember(Name="reporterContact", EmitDefaultValue=false)]
        public Contact? ReporterContact { get; set; }

        /// <summary>
        /// Gets or Sets FirstResponseAt
        /// </summary>
        [DataMember(Name="firstResponseAt", EmitDefaultValue=true)]
        public DateTimeOffset? FirstResponseAt { get; set; }

        /// <summary>
        /// Gets or Sets FirstResponseByActor
        /// </summary>
        [DataMember(Name="firstResponseByActor", EmitDefaultValue=false)]
        public Actor? FirstResponseByActor { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name="completedAt", EmitDefaultValue=true)]
        public DateTimeOffset? CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets CompletedByActor
        /// </summary>
        [DataMember(Name="completedByActor", EmitDefaultValue=false)]
        public Actor? CompletedByActor { get; set; }

        /// <summary>
        /// Gets or Sets CanceledAt
        /// </summary>
        [DataMember(Name="canceledAt", EmitDefaultValue=true)]
        public DateTimeOffset? CanceledAt { get; set; }

        /// <summary>
        /// Gets or Sets CanceledByActor
        /// </summary>
        [DataMember(Name="canceledByActor", EmitDefaultValue=false)]
        public Actor? CanceledByActor { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedByActor
        /// </summary>
        [DataMember(Name="updatedByActor", EmitDefaultValue=false)]
        public Actor? UpdatedByActor { get; set; }

        /// <summary>
        /// Total charges for this work order
        /// </summary>
        /// <value>Total charges for this work order</value>
        [DataMember(Name="totalCharge", EmitDefaultValue=true)]
        public float? TotalCharge { get; set; }

        /// <summary>
        /// Gets or Sets Inspection
        /// </summary>
        [DataMember(Name="inspection", EmitDefaultValue=false)]
        public Inspection? Inspection { get; set; }

        /// <summary>
        /// Type of work order
        /// </summary>
        /// <value>Type of work order</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string? Type { get; set; }

        /// <summary>
        /// Gets or Sets Integrations
        /// </summary>
        [DataMember(Name="integrations", EmitDefaultValue=false)]
        public List<EntityIntegration> Integrations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkOrder {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AssignedUsers: ").Append(AssignedUsers).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  SubCategory: ").Append(SubCategory).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  DefectMedia: ").Append(DefectMedia).Append("\n");
            sb.Append("  RepairMedia: ").Append(RepairMedia).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedByActor: ").Append(CreatedByActor).Append("\n");
            sb.Append("  ReporterContact: ").Append(ReporterContact).Append("\n");
            sb.Append("  FirstResponseAt: ").Append(FirstResponseAt).Append("\n");
            sb.Append("  FirstResponseByActor: ").Append(FirstResponseByActor).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CompletedByActor: ").Append(CompletedByActor).Append("\n");
            sb.Append("  CanceledAt: ").Append(CanceledAt).Append("\n");
            sb.Append("  CanceledByActor: ").Append(CanceledByActor).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UpdatedByActor: ").Append(UpdatedByActor).Append("\n");
            sb.Append("  TotalCharge: ").Append(TotalCharge).Append("\n");
            sb.Append("  Inspection: ").Append(Inspection).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkOrder)obj);
        }

        /// <summary>
        /// Returns true if WorkOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkOrder other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Sequence == other.Sequence ||
                    
                    Sequence.Equals(other.Sequence)
                ) && 
                (
                    Priority == other.Priority ||
                    
                    Priority.Equals(other.Priority)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    StatusText == other.StatusText ||
                    StatusText != null &&
                    StatusText.Equals(other.StatusText)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AssignedUsers == other.AssignedUsers ||
                    AssignedUsers != null &&
                    other.AssignedUsers != null &&
                    AssignedUsers.SequenceEqual(other.AssignedUsers)
                ) && 
                (
                    Property == other.Property ||
                    Property != null &&
                    Property.Equals(other.Property)
                ) && 
                (
                    Building == other.Building ||
                    Building != null &&
                    Building.Equals(other.Building)
                ) && 
                (
                    Site == other.Site ||
                    Site != null &&
                    Site.Equals(other.Site)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    SubCategory == other.SubCategory ||
                    SubCategory != null &&
                    SubCategory.Equals(other.SubCategory)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    other.Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    Tenant == other.Tenant ||
                    Tenant != null &&
                    Tenant.Equals(other.Tenant)
                ) && 
                (
                    DefectMedia == other.DefectMedia ||
                    DefectMedia != null &&
                    other.DefectMedia != null &&
                    DefectMedia.SequenceEqual(other.DefectMedia)
                ) && 
                (
                    RepairMedia == other.RepairMedia ||
                    RepairMedia != null &&
                    other.RepairMedia != null &&
                    RepairMedia.SequenceEqual(other.RepairMedia)
                ) && 
                (
                    DueDate == other.DueDate ||
                    
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    CreatedByActor == other.CreatedByActor ||
                    CreatedByActor != null &&
                    CreatedByActor.Equals(other.CreatedByActor)
                ) && 
                (
                    ReporterContact == other.ReporterContact ||
                    ReporterContact != null &&
                    ReporterContact.Equals(other.ReporterContact)
                ) && 
                (
                    FirstResponseAt == other.FirstResponseAt ||
                    
                    FirstResponseAt.Equals(other.FirstResponseAt)
                ) && 
                (
                    FirstResponseByActor == other.FirstResponseByActor ||
                    FirstResponseByActor != null &&
                    FirstResponseByActor.Equals(other.FirstResponseByActor)
                ) && 
                (
                    CompletedAt == other.CompletedAt ||
                    
                    CompletedAt.Equals(other.CompletedAt)
                ) && 
                (
                    CompletedByActor == other.CompletedByActor ||
                    CompletedByActor != null &&
                    CompletedByActor.Equals(other.CompletedByActor)
                ) && 
                (
                    CanceledAt == other.CanceledAt ||
                    
                    CanceledAt.Equals(other.CanceledAt)
                ) && 
                (
                    CanceledByActor == other.CanceledByActor ||
                    CanceledByActor != null &&
                    CanceledByActor.Equals(other.CanceledByActor)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    UpdatedByActor == other.UpdatedByActor ||
                    UpdatedByActor != null &&
                    UpdatedByActor.Equals(other.UpdatedByActor)
                ) && 
                (
                    TotalCharge == other.TotalCharge ||
                    
                    TotalCharge.Equals(other.TotalCharge)
                ) && 
                (
                    Inspection == other.Inspection ||
                    Inspection != null &&
                    Inspection.Equals(other.Inspection)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Integrations == other.Integrations ||
                    Integrations != null &&
                    other.Integrations != null &&
                    Integrations.SequenceEqual(other.Integrations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Sequence.GetHashCode();
                    
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (StatusText != null)
                    hashCode = hashCode * 59 + StatusText.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AssignedUsers != null)
                    hashCode = hashCode * 59 + AssignedUsers.GetHashCode();
                    if (Property != null)
                    hashCode = hashCode * 59 + Property.GetHashCode();
                    if (Building != null)
                    hashCode = hashCode * 59 + Building.GetHashCode();
                    if (Site != null)
                    hashCode = hashCode * 59 + Site.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (SubCategory != null)
                    hashCode = hashCode * 59 + SubCategory.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (Tenant != null)
                    hashCode = hashCode * 59 + Tenant.GetHashCode();
                    if (DefectMedia != null)
                    hashCode = hashCode * 59 + DefectMedia.GetHashCode();
                    if (RepairMedia != null)
                    hashCode = hashCode * 59 + RepairMedia.GetHashCode();
                    
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (CreatedByActor != null)
                    hashCode = hashCode * 59 + CreatedByActor.GetHashCode();
                    if (ReporterContact != null)
                    hashCode = hashCode * 59 + ReporterContact.GetHashCode();
                    
                    hashCode = hashCode * 59 + FirstResponseAt.GetHashCode();
                    if (FirstResponseByActor != null)
                    hashCode = hashCode * 59 + FirstResponseByActor.GetHashCode();
                    
                    hashCode = hashCode * 59 + CompletedAt.GetHashCode();
                    if (CompletedByActor != null)
                    hashCode = hashCode * 59 + CompletedByActor.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanceledAt.GetHashCode();
                    if (CanceledByActor != null)
                    hashCode = hashCode * 59 + CanceledByActor.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (UpdatedByActor != null)
                    hashCode = hashCode * 59 + UpdatedByActor.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalCharge.GetHashCode();
                    if (Inspection != null)
                    hashCode = hashCode * 59 + Inspection.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Integrations != null)
                    hashCode = hashCode * 59 + Integrations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkOrder left, WorkOrder right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkOrder left, WorkOrder right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
