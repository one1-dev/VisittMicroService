/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Site : IEquatable<Site>
    {
        /// <summary>
        /// Unique identifier for the site
        /// </summary>
        /// <value>Unique identifier for the site</value>
        [Required]
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the site
        /// </summary>
        /// <value>Name of the site</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Model type of the site
        /// </summary>
        /// <value>Model type of the site</value>
        [TypeConverter(typeof(CustomEnumConverter<ModelTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ModelTypeEnum
        {
            
            /// <summary>
            /// Enum SiteEnum for site
            /// </summary>
            [EnumMember(Value = "site")]
            SiteEnum = 1,
            
            /// <summary>
            /// Enum EquipmentEnum for equipment
            /// </summary>
            [EnumMember(Value = "equipment")]
            EquipmentEnum = 2,
            
            /// <summary>
            /// Enum LeasableSiteEnum for leasable_site
            /// </summary>
            [EnumMember(Value = "leasable_site")]
            LeasableSiteEnum = 3,
            
            /// <summary>
            /// Enum FloorEnum for floor
            /// </summary>
            [EnumMember(Value = "floor")]
            FloorEnum = 4
        }

        /// <summary>
        /// Model type of the site
        /// </summary>
        /// <value>Model type of the site</value>
        [Required]
        [DataMember(Name="modelType", EmitDefaultValue=true)]
        public ModelTypeEnum ModelType { get; set; }

        /// <summary>
        /// Parent sites in the hierarchy
        /// </summary>
        /// <value>Parent sites in the hierarchy</value>
        [DataMember(Name="parentSites", EmitDefaultValue=false)]
        public List<Site> ParentSites { get; set; }

        /// <summary>
        /// Floor that contains this site
        /// </summary>
        /// <value>Floor that contains this site</value>
        [DataMember(Name="floor", EmitDefaultValue=false)]
        public Site? Floor { get; set; }

        /// <summary>
        /// Type of the site
        /// </summary>
        /// <value>Type of the site</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string? Type { get; set; }

        /// <summary>
        /// QR code of the site
        /// </summary>
        /// <value>QR code of the site</value>
        [DataMember(Name="qrCode", EmitDefaultValue=false)]
        public string? QrCode { get; set; }

        /// <summary>
        /// Additional notes about the site
        /// </summary>
        /// <value>Additional notes about the site</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string? Notes { get; set; }

        /// <summary>
        /// Unit code of the site
        /// </summary>
        /// <value>Unit code of the site</value>
        [DataMember(Name="unitCode", EmitDefaultValue=false)]
        public string? UnitCode { get; set; }

        /// <summary>
        /// Size of the site in sqft or sqm
        /// </summary>
        /// <value>Size of the site in sqft or sqm</value>
        [DataMember(Name="size", EmitDefaultValue=true)]
        public float? Size { get; set; }

        /// <summary>
        /// Level of the floor (only for floor sites)
        /// </summary>
        /// <value>Level of the floor (only for floor sites)</value>
        [DataMember(Name="level", EmitDefaultValue=true)]
        public int? Level { get; set; }

        /// <summary>
        /// Gets or Sets Integrations
        /// </summary>
        [DataMember(Name="integrations", EmitDefaultValue=false)]
        public List<EntityIntegration> Integrations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Site {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("  ParentSites: ").Append(ParentSites).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  QrCode: ").Append(QrCode).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  UnitCode: ").Append(UnitCode).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Site)obj);
        }

        /// <summary>
        /// Returns true if Site instances are equal
        /// </summary>
        /// <param name="other">Instance of Site to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Site other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ModelType == other.ModelType ||
                    
                    ModelType.Equals(other.ModelType)
                ) && 
                (
                    ParentSites == other.ParentSites ||
                    ParentSites != null &&
                    other.ParentSites != null &&
                    ParentSites.SequenceEqual(other.ParentSites)
                ) && 
                (
                    Floor == other.Floor ||
                    Floor != null &&
                    Floor.Equals(other.Floor)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    QrCode == other.QrCode ||
                    QrCode != null &&
                    QrCode.Equals(other.QrCode)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    UnitCode == other.UnitCode ||
                    UnitCode != null &&
                    UnitCode.Equals(other.UnitCode)
                ) && 
                (
                    Size == other.Size ||
                    
                    Size.Equals(other.Size)
                ) && 
                (
                    Level == other.Level ||
                    
                    Level.Equals(other.Level)
                ) && 
                (
                    Integrations == other.Integrations ||
                    Integrations != null &&
                    other.Integrations != null &&
                    Integrations.SequenceEqual(other.Integrations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + ModelType.GetHashCode();
                    if (ParentSites != null)
                    hashCode = hashCode * 59 + ParentSites.GetHashCode();
                    if (Floor != null)
                    hashCode = hashCode * 59 + Floor.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (QrCode != null)
                    hashCode = hashCode * 59 + QrCode.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (UnitCode != null)
                    hashCode = hashCode * 59 + UnitCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (Integrations != null)
                    hashCode = hashCode * 59 + Integrations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Site left, Site right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Site left, Site right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
