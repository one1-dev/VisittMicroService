/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReviewAnswer : IEquatable<ReviewAnswer>
    {

        /// <summary>
        /// The question asked
        /// </summary>
        /// <value>The question asked</value>
        [TypeConverter(typeof(CustomEnumConverter<QuestionEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum QuestionEnum
        {
            
            /// <summary>
            /// Enum SatisfactionEnum for satisfaction
            /// </summary>
            [EnumMember(Value = "satisfaction")]
            SatisfactionEnum = 1,
            
            /// <summary>
            /// Enum SpeedEnum for speed
            /// </summary>
            [EnumMember(Value = "speed")]
            SpeedEnum = 2,
            
            /// <summary>
            /// Enum ProfessionalismEnum for professionalism
            /// </summary>
            [EnumMember(Value = "professionalism")]
            ProfessionalismEnum = 3,
            
            /// <summary>
            /// Enum AttitudeEnum for attitude
            /// </summary>
            [EnumMember(Value = "attitude")]
            AttitudeEnum = 4,
            
            /// <summary>
            /// Enum CommentEnum for comment
            /// </summary>
            [EnumMember(Value = "comment")]
            CommentEnum = 5
        }

        /// <summary>
        /// The question asked
        /// </summary>
        /// <value>The question asked</value>
        [Required]
        [DataMember(Name="question", EmitDefaultValue=true)]
        public QuestionEnum Question { get; set; }


        /// <summary>
        /// Type of the answer
        /// </summary>
        /// <value>Type of the answer</value>
        [TypeConverter(typeof(CustomEnumConverter<AnswerTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AnswerTypeEnum
        {
            
            /// <summary>
            /// Enum CommentEnum for comment
            /// </summary>
            [EnumMember(Value = "comment")]
            CommentEnum = 1,
            
            /// <summary>
            /// Enum ScaleEnum for scale
            /// </summary>
            [EnumMember(Value = "scale")]
            ScaleEnum = 2,
            
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 3
        }

        /// <summary>
        /// Type of the answer
        /// </summary>
        /// <value>Type of the answer</value>
        [Required]
        [DataMember(Name="answerType", EmitDefaultValue=true)]
        public AnswerTypeEnum AnswerType { get; set; }

        /// <summary>
        /// The answer value
        /// </summary>
        /// <value>The answer value</value>
        [Required]
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReviewAnswer {\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  AnswerType: ").Append(AnswerType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReviewAnswer)obj);
        }

        /// <summary>
        /// Returns true if ReviewAnswer instances are equal
        /// </summary>
        /// <param name="other">Instance of ReviewAnswer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReviewAnswer other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Question == other.Question ||
                    
                    Question.Equals(other.Question)
                ) && 
                (
                    AnswerType == other.AnswerType ||
                    
                    AnswerType.Equals(other.AnswerType)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Question.GetHashCode();
                    
                    hashCode = hashCode * 59 + AnswerType.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReviewAnswer left, ReviewAnswer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReviewAnswer left, ReviewAnswer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
