/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Review : IEquatable<Review>
    {
        /// <summary>
        /// Unique identifier for the review
        /// </summary>
        /// <value>Unique identifier for the review</value>
        [Required]
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrder
        /// </summary>
        [Required]
        [DataMember(Name="workOrder", EmitDefaultValue=false)]
        public WorkOrder WorkOrder { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByActor
        /// </summary>
        [Required]
        [DataMember(Name="createdByActor", EmitDefaultValue=false)]
        public Actor CreatedByActor { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [Required]
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// General review score from 1-5
        /// </summary>
        /// <value>General review score from 1-5</value>
        [DataMember(Name="score", EmitDefaultValue=true)]
        public int? Score { get; set; }

        /// <summary>
        /// Gets or Sets Answers
        /// </summary>
        [DataMember(Name="answers", EmitDefaultValue=false)]
        public List<ReviewAnswer> Answers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Review {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  WorkOrder: ").Append(WorkOrder).Append("\n");
            sb.Append("  CreatedByActor: ").Append(CreatedByActor).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Review)obj);
        }

        /// <summary>
        /// Returns true if Review instances are equal
        /// </summary>
        /// <param name="other">Instance of Review to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Review other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    WorkOrder == other.WorkOrder ||
                    WorkOrder != null &&
                    WorkOrder.Equals(other.WorkOrder)
                ) && 
                (
                    CreatedByActor == other.CreatedByActor ||
                    CreatedByActor != null &&
                    CreatedByActor.Equals(other.CreatedByActor)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Score == other.Score ||
                    
                    Score.Equals(other.Score)
                ) && 
                (
                    Answers == other.Answers ||
                    Answers != null &&
                    other.Answers != null &&
                    Answers.SequenceEqual(other.Answers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (WorkOrder != null)
                    hashCode = hashCode * 59 + WorkOrder.GetHashCode();
                    if (CreatedByActor != null)
                    hashCode = hashCode * 59 + CreatedByActor.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    if (Answers != null)
                    hashCode = hashCode * 59 + Answers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Review left, Review right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Review left, Review right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
