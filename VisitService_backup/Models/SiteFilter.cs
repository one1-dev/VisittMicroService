/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// Filter parameters for sites query
    /// </summary>
    [DataContract]
    public partial class SiteFilter : IEquatable<SiteFilter>
    {
        /// <summary>
        /// Filter by site ID
        /// </summary>
        /// <value>Filter by site ID</value>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public FilterIdStringArray? Id { get; set; }

        /// <summary>
        /// Filter by building ID
        /// </summary>
        /// <value>Filter by building ID</value>
        [DataMember(Name="buildingId", EmitDefaultValue=false)]
        public FilterIdStringArray? BuildingId { get; set; }

        /// <summary>
        /// Filter by site model type
        /// </summary>
        /// <value>Filter by site model type</value>
        [DataMember(Name="modelType", EmitDefaultValue=false)]
        public FilterSiteModelType? ModelType { get; set; }

        /// <summary>
        /// Filter by site type
        /// </summary>
        /// <value>Filter by site type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public FilterStringArray? Type { get; set; }

        /// <summary>
        /// Filter by site name
        /// </summary>
        /// <value>Filter by site name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public FilterStringArray? Name { get; set; }

        /// <summary>
        /// Filter all children sites of a parent site
        /// </summary>
        /// <value>Filter all children sites of a parent site</value>
        [DataMember(Name="parentSiteId", EmitDefaultValue=false)]
        public FilterIdStringArray? ParentSiteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteFilter {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BuildingId: ").Append(BuildingId).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentSiteId: ").Append(ParentSiteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SiteFilter)obj);
        }

        /// <summary>
        /// Returns true if SiteFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of SiteFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteFilter other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BuildingId == other.BuildingId ||
                    BuildingId != null &&
                    BuildingId.Equals(other.BuildingId)
                ) && 
                (
                    ModelType == other.ModelType ||
                    ModelType != null &&
                    ModelType.Equals(other.ModelType)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ParentSiteId == other.ParentSiteId ||
                    ParentSiteId != null &&
                    ParentSiteId.Equals(other.ParentSiteId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BuildingId != null)
                    hashCode = hashCode * 59 + BuildingId.GetHashCode();
                    if (ModelType != null)
                    hashCode = hashCode * 59 + ModelType.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ParentSiteId != null)
                    hashCode = hashCode * 59 + ParentSiteId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SiteFilter left, SiteFilter right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SiteFilter left, SiteFilter right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
