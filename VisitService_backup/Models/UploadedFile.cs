/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UploadedFile : IEquatable<UploadedFile>
    {
        /// <summary>
        /// Unique identifier for the uploaded file
        /// </summary>
        /// <value>Unique identifier for the uploaded file</value>
        [Required]
        [DataMember(Name="fileId", EmitDefaultValue=false)]
        public string FileId { get; set; }

        /// <summary>
        /// File format/extension
        /// </summary>
        /// <value>File format/extension</value>
        [Required]
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// URL to access the file
        /// </summary>
        /// <value>URL to access the file</value>
        [Required]
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Original filename
        /// </summary>
        /// <value>Original filename</value>
        [Required]
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// File size in bytes
        /// </summary>
        /// <value>File size in bytes</value>
        [Required]
        [DataMember(Name="bytes", EmitDefaultValue=true)]
        public int Bytes { get; set; }

        /// <summary>
        /// Type of resource (image, document, etc.)
        /// </summary>
        /// <value>Type of resource (image, document, etc.)</value>
        [Required]
        [DataMember(Name="resourceType", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadedFile {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Bytes: ").Append(Bytes).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UploadedFile)obj);
        }

        /// <summary>
        /// Returns true if UploadedFile instances are equal
        /// </summary>
        /// <param name="other">Instance of UploadedFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadedFile other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileId == other.FileId ||
                    FileId != null &&
                    FileId.Equals(other.FileId)
                ) && 
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.Equals(other.Format)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Filename == other.Filename ||
                    Filename != null &&
                    Filename.Equals(other.Filename)
                ) && 
                (
                    Bytes == other.Bytes ||
                    
                    Bytes.Equals(other.Bytes)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileId != null)
                    hashCode = hashCode * 59 + FileId.GetHashCode();
                    if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Filename != null)
                    hashCode = hashCode * 59 + Filename.GetHashCode();
                    
                    hashCode = hashCode * 59 + Bytes.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UploadedFile left, UploadedFile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UploadedFile left, UploadedFile right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
