/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InspectionTrigger : IEquatable<InspectionTrigger>
    {
        /// <summary>
        /// Unique identifier for the inspection trigger
        /// </summary>
        /// <value>Unique identifier for the inspection trigger</value>
        [Required]
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the inspection
        /// </summary>
        /// <value>Name of the inspection</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the inspection
        /// </summary>
        /// <value>Description of the inspection</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string? Description { get; set; }


        /// <summary>
        /// Frequency of the inspection
        /// </summary>
        /// <value>Frequency of the inspection</value>
        [TypeConverter(typeof(CustomEnumConverter<FrequencyTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FrequencyTypeEnum
        {
            
            /// <summary>
            /// Enum OneTimeEnum for one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            OneTimeEnum = 1,
            
            /// <summary>
            /// Enum HourEnum for hour
            /// </summary>
            [EnumMember(Value = "hour")]
            HourEnum = 2,
            
            /// <summary>
            /// Enum DayEnum for day
            /// </summary>
            [EnumMember(Value = "day")]
            DayEnum = 3,
            
            /// <summary>
            /// Enum WeekEnum for week
            /// </summary>
            [EnumMember(Value = "week")]
            WeekEnum = 4,
            
            /// <summary>
            /// Enum Every2WeeksEnum for every_2_weeks
            /// </summary>
            [EnumMember(Value = "every_2_weeks")]
            Every2WeeksEnum = 5,
            
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 6,
            
            /// <summary>
            /// Enum Every2MonthsEnum for every_2_months
            /// </summary>
            [EnumMember(Value = "every_2_months")]
            Every2MonthsEnum = 7,
            
            /// <summary>
            /// Enum Every3MonthsEnum for every_3_months
            /// </summary>
            [EnumMember(Value = "every_3_months")]
            Every3MonthsEnum = 8,
            
            /// <summary>
            /// Enum Every4MonthsEnum for every_4_months
            /// </summary>
            [EnumMember(Value = "every_4_months")]
            Every4MonthsEnum = 9,
            
            /// <summary>
            /// Enum Every6MonthsEnum for every_6_months
            /// </summary>
            [EnumMember(Value = "every_6_months")]
            Every6MonthsEnum = 10,
            
            /// <summary>
            /// Enum YearEnum for year
            /// </summary>
            [EnumMember(Value = "year")]
            YearEnum = 11,
            
            /// <summary>
            /// Enum CustomEnum for custom
            /// </summary>
            [EnumMember(Value = "custom")]
            CustomEnum = 12
        }

        /// <summary>
        /// Frequency of the inspection
        /// </summary>
        /// <value>Frequency of the inspection</value>
        [Required]
        [DataMember(Name="frequencyType", EmitDefaultValue=true)]
        public FrequencyTypeEnum FrequencyType { get; set; }

        /// <summary>
        /// Gets or Sets CompletionPolicySettings
        /// </summary>
        [DataMember(Name="completionPolicySettings", EmitDefaultValue=false)]
        public CompletionPolicySettings? CompletionPolicySettings { get; set; }

        /// <summary>
        /// Gets or Sets Rrule
        /// </summary>
        [DataMember(Name="rrule", EmitDefaultValue=false)]
        public RRule? Rrule { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public Category? Category { get; set; }

        /// <summary>
        /// Gets or Sets AssignedUsers
        /// </summary>
        [DataMember(Name="assignedUsers", EmitDefaultValue=false)]
        public List<User> AssignedUsers { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public Property? Property { get; set; }

        /// <summary>
        /// Gets or Sets Buildings
        /// </summary>
        [DataMember(Name="buildings", EmitDefaultValue=false)]
        public List<Building> Buildings { get; set; }

        /// <summary>
        /// Gets or Sets Sites
        /// </summary>
        [DataMember(Name="sites", EmitDefaultValue=false)]
        public List<Site> Sites { get; set; }

        /// <summary>
        /// Whether the trigger is paused
        /// </summary>
        /// <value>Whether the trigger is paused</value>
        [Required]
        [DataMember(Name="isPaused", EmitDefaultValue=true)]
        public bool IsPaused { get; set; }

        /// <summary>
        /// Gets or Sets PauseHistory
        /// </summary>
        [DataMember(Name="pauseHistory", EmitDefaultValue=false)]
        public List<PauseHistoryRecord> PauseHistory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionTrigger {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FrequencyType: ").Append(FrequencyType).Append("\n");
            sb.Append("  CompletionPolicySettings: ").Append(CompletionPolicySettings).Append("\n");
            sb.Append("  Rrule: ").Append(Rrule).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AssignedUsers: ").Append(AssignedUsers).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Buildings: ").Append(Buildings).Append("\n");
            sb.Append("  Sites: ").Append(Sites).Append("\n");
            sb.Append("  IsPaused: ").Append(IsPaused).Append("\n");
            sb.Append("  PauseHistory: ").Append(PauseHistory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InspectionTrigger)obj);
        }

        /// <summary>
        /// Returns true if InspectionTrigger instances are equal
        /// </summary>
        /// <param name="other">Instance of InspectionTrigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionTrigger other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    FrequencyType == other.FrequencyType ||
                    
                    FrequencyType.Equals(other.FrequencyType)
                ) && 
                (
                    CompletionPolicySettings == other.CompletionPolicySettings ||
                    CompletionPolicySettings != null &&
                    CompletionPolicySettings.Equals(other.CompletionPolicySettings)
                ) && 
                (
                    Rrule == other.Rrule ||
                    Rrule != null &&
                    Rrule.Equals(other.Rrule)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    AssignedUsers == other.AssignedUsers ||
                    AssignedUsers != null &&
                    other.AssignedUsers != null &&
                    AssignedUsers.SequenceEqual(other.AssignedUsers)
                ) && 
                (
                    Property == other.Property ||
                    Property != null &&
                    Property.Equals(other.Property)
                ) && 
                (
                    Buildings == other.Buildings ||
                    Buildings != null &&
                    other.Buildings != null &&
                    Buildings.SequenceEqual(other.Buildings)
                ) && 
                (
                    Sites == other.Sites ||
                    Sites != null &&
                    other.Sites != null &&
                    Sites.SequenceEqual(other.Sites)
                ) && 
                (
                    IsPaused == other.IsPaused ||
                    
                    IsPaused.Equals(other.IsPaused)
                ) && 
                (
                    PauseHistory == other.PauseHistory ||
                    PauseHistory != null &&
                    other.PauseHistory != null &&
                    PauseHistory.SequenceEqual(other.PauseHistory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + FrequencyType.GetHashCode();
                    if (CompletionPolicySettings != null)
                    hashCode = hashCode * 59 + CompletionPolicySettings.GetHashCode();
                    if (Rrule != null)
                    hashCode = hashCode * 59 + Rrule.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (AssignedUsers != null)
                    hashCode = hashCode * 59 + AssignedUsers.GetHashCode();
                    if (Property != null)
                    hashCode = hashCode * 59 + Property.GetHashCode();
                    if (Buildings != null)
                    hashCode = hashCode * 59 + Buildings.GetHashCode();
                    if (Sites != null)
                    hashCode = hashCode * 59 + Sites.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPaused.GetHashCode();
                    if (PauseHistory != null)
                    hashCode = hashCode * 59 + PauseHistory.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InspectionTrigger left, InspectionTrigger right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InspectionTrigger left, InspectionTrigger right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
