/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Inspection : IEquatable<Inspection>
    {
        /// <summary>
        /// Unique identifier for the inspection
        /// </summary>
        /// <value>Unique identifier for the inspection</value>
        [Required]
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Description of the inspection
        /// </summary>
        /// <value>Description of the inspection</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets InspectionTrigger
        /// </summary>
        [DataMember(Name="inspectionTrigger", EmitDefaultValue=false)]
        public InspectionTrigger? InspectionTrigger { get; set; }


        /// <summary>
        /// Status of the inspection
        /// </summary>
        /// <value>Status of the inspection</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OpenEnum for open
            /// </summary>
            [EnumMember(Value = "open")]
            OpenEnum = 1,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 2,
            
            /// <summary>
            /// Enum MissedEnum for missed
            /// </summary>
            [EnumMember(Value = "missed")]
            MissedEnum = 3,
            
            /// <summary>
            /// Enum ReopenedEnum for reopened
            /// </summary>
            [EnumMember(Value = "reopened")]
            ReopenedEnum = 4,
            
            /// <summary>
            /// Enum CompletedLateEnum for completed_late
            /// </summary>
            [EnumMember(Value = "completed_late")]
            CompletedLateEnum = 5
        }

        /// <summary>
        /// Status of the inspection
        /// </summary>
        /// <value>Status of the inspection</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// When inspection opens for completion
        /// </summary>
        /// <value>When inspection opens for completion</value>
        [Required]
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// When inspection will be marked as missed
        /// </summary>
        /// <value>When inspection will be marked as missed</value>
        [Required]
        [DataMember(Name="dueDate", EmitDefaultValue=true)]
        public DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// When inspection was closed
        /// </summary>
        /// <value>When inspection was closed</value>
        [DataMember(Name="closedAt", EmitDefaultValue=true)]
        public DateTimeOffset? ClosedAt { get; set; }

        /// <summary>
        /// Gets or Sets AssignedUsers
        /// </summary>
        [DataMember(Name="assignedUsers", EmitDefaultValue=false)]
        public List<User> AssignedUsers { get; set; }

        /// <summary>
        /// Gets or Sets ClosedByActor
        /// </summary>
        [DataMember(Name="closedByActor", EmitDefaultValue=false)]
        public Actor? ClosedByActor { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public Property? Property { get; set; }

        /// <summary>
        /// Gets or Sets Buildings
        /// </summary>
        [DataMember(Name="buildings", EmitDefaultValue=false)]
        public List<Building> Buildings { get; set; }

        /// <summary>
        /// Gets or Sets Sites
        /// </summary>
        [DataMember(Name="sites", EmitDefaultValue=false)]
        public List<Site> Sites { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public Category? Category { get; set; }

        /// <summary>
        /// Gets or Sets WorkOrders
        /// </summary>
        [DataMember(Name="workOrders", EmitDefaultValue=false)]
        public List<WorkOrder> WorkOrders { get; set; }

        /// <summary>
        /// Gets or Sets Edits
        /// </summary>
        [DataMember(Name="edits", EmitDefaultValue=false)]
        public List<InspectionEdit> Edits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Inspection {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InspectionTrigger: ").Append(InspectionTrigger).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ClosedAt: ").Append(ClosedAt).Append("\n");
            sb.Append("  AssignedUsers: ").Append(AssignedUsers).Append("\n");
            sb.Append("  ClosedByActor: ").Append(ClosedByActor).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Buildings: ").Append(Buildings).Append("\n");
            sb.Append("  Sites: ").Append(Sites).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  WorkOrders: ").Append(WorkOrders).Append("\n");
            sb.Append("  Edits: ").Append(Edits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Inspection)obj);
        }

        /// <summary>
        /// Returns true if Inspection instances are equal
        /// </summary>
        /// <param name="other">Instance of Inspection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Inspection other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    InspectionTrigger == other.InspectionTrigger ||
                    InspectionTrigger != null &&
                    InspectionTrigger.Equals(other.InspectionTrigger)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    StartDate == other.StartDate ||
                    
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    DueDate == other.DueDate ||
                    
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    ClosedAt == other.ClosedAt ||
                    
                    ClosedAt.Equals(other.ClosedAt)
                ) && 
                (
                    AssignedUsers == other.AssignedUsers ||
                    AssignedUsers != null &&
                    other.AssignedUsers != null &&
                    AssignedUsers.SequenceEqual(other.AssignedUsers)
                ) && 
                (
                    ClosedByActor == other.ClosedByActor ||
                    ClosedByActor != null &&
                    ClosedByActor.Equals(other.ClosedByActor)
                ) && 
                (
                    Property == other.Property ||
                    Property != null &&
                    Property.Equals(other.Property)
                ) && 
                (
                    Buildings == other.Buildings ||
                    Buildings != null &&
                    other.Buildings != null &&
                    Buildings.SequenceEqual(other.Buildings)
                ) && 
                (
                    Sites == other.Sites ||
                    Sites != null &&
                    other.Sites != null &&
                    Sites.SequenceEqual(other.Sites)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    WorkOrders == other.WorkOrders ||
                    WorkOrders != null &&
                    other.WorkOrders != null &&
                    WorkOrders.SequenceEqual(other.WorkOrders)
                ) && 
                (
                    Edits == other.Edits ||
                    Edits != null &&
                    other.Edits != null &&
                    Edits.SequenceEqual(other.Edits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (InspectionTrigger != null)
                    hashCode = hashCode * 59 + InspectionTrigger.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + ClosedAt.GetHashCode();
                    if (AssignedUsers != null)
                    hashCode = hashCode * 59 + AssignedUsers.GetHashCode();
                    if (ClosedByActor != null)
                    hashCode = hashCode * 59 + ClosedByActor.GetHashCode();
                    if (Property != null)
                    hashCode = hashCode * 59 + Property.GetHashCode();
                    if (Buildings != null)
                    hashCode = hashCode * 59 + Buildings.GetHashCode();
                    if (Sites != null)
                    hashCode = hashCode * 59 + Sites.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (WorkOrders != null)
                    hashCode = hashCode * 59 + WorkOrders.GetHashCode();
                    if (Edits != null)
                    hashCode = hashCode * 59 + Edits.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Inspection left, Inspection right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Inspection left, Inspection right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
