/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using VisitService.Converters;

namespace VisitService.Models
{ 
    /// <summary>
    /// Filter for string fields with comparison operators
    /// </summary>
    [DataContract]
    public partial class FilterStringArray : IEquatable<FilterStringArray>
    {
        /// <summary>
        /// Equal to a given string
        /// </summary>
        /// <value>Equal to a given string</value>
        /* <example>maintenance</example> */
        [DataMember(Name="eq", EmitDefaultValue=false)]
        public string? Eq { get; set; }

        /// <summary>
        /// Not equal to a given string
        /// </summary>
        /// <value>Not equal to a given string</value>
        [DataMember(Name="neq", EmitDefaultValue=false)]
        public string? Neq { get; set; }

        /// <summary>
        /// Contains a given string
        /// </summary>
        /// <value>Contains a given string</value>
        /* <example>urgent</example> */
        [DataMember(Name="contains", EmitDefaultValue=false)]
        public string? Contains { get; set; }

        /// <summary>
        /// In array of given strings
        /// </summary>
        /// <value>In array of given strings</value>
        /* <example>[maintenance, repair]</example> */
        [DataMember(Name="in", EmitDefaultValue=false)]
        public List<string> In { get; set; }

        /// <summary>
        /// Not in array of given strings
        /// </summary>
        /// <value>Not in array of given strings</value>
        /* <example>[emergency, urgent]</example> */
        [DataMember(Name="nin", EmitDefaultValue=false)]
        public List<string> Nin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterStringArray {\n");
            sb.Append("  Eq: ").Append(Eq).Append("\n");
            sb.Append("  Neq: ").Append(Neq).Append("\n");
            sb.Append("  Contains: ").Append(Contains).Append("\n");
            sb.Append("  In: ").Append(In).Append("\n");
            sb.Append("  Nin: ").Append(Nin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FilterStringArray)obj);
        }

        /// <summary>
        /// Returns true if FilterStringArray instances are equal
        /// </summary>
        /// <param name="other">Instance of FilterStringArray to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterStringArray other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Eq == other.Eq ||
                    Eq != null &&
                    Eq.Equals(other.Eq)
                ) && 
                (
                    Neq == other.Neq ||
                    Neq != null &&
                    Neq.Equals(other.Neq)
                ) && 
                (
                    Contains == other.Contains ||
                    Contains != null &&
                    Contains.Equals(other.Contains)
                ) && 
                (
                    In == other.In ||
                    In != null &&
                    other.In != null &&
                    In.SequenceEqual(other.In)
                ) && 
                (
                    Nin == other.Nin ||
                    Nin != null &&
                    other.Nin != null &&
                    Nin.SequenceEqual(other.Nin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Eq != null)
                    hashCode = hashCode * 59 + Eq.GetHashCode();
                    if (Neq != null)
                    hashCode = hashCode * 59 + Neq.GetHashCode();
                    if (Contains != null)
                    hashCode = hashCode * 59 + Contains.GetHashCode();
                    if (In != null)
                    hashCode = hashCode * 59 + In.GetHashCode();
                    if (Nin != null)
                    hashCode = hashCode * 59 + Nin.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FilterStringArray left, FilterStringArray right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FilterStringArray left, FilterStringArray right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
