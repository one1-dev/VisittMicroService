/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using VisitService.Attributes;
using VisitService.Models;
using VisitService.Services.Interfaces;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SitesApiController(ISitesService sitesService) : ControllerBase
    { 
        /// <summary>
        /// Get list of sites
        /// </summary>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        /// <param name="buildingId">Filter by building ID</param>
        /// <param name="modelType">Filter by model type</param>
        /// <param name="type">Filter by site type</param>
        /// <param name="parentSiteId">Filter by parent site ID</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/sites")]
        // [Authorize]
        [ValidateModelState]
        [SwaggerOperation("SitesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SitesPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> SitesGet([FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "buildingId")]string? buildingId, [FromQuery (Name = "modelType")]string? modelType, [FromQuery (Name = "type")]string? type, [FromQuery (Name = "parentSiteId")]string? parentSiteId, CancellationToken cancellationToken)
            => Ok( await sitesService.GetSites(skip ??= 0, limit ??=20 , buildingId, modelType, type, parentSiteId, cancellationToken));

        /// <summary>
        /// Search sites (advanced filtering)
        /// </summary>
        /// <remarks>For complex queries with multiple conditions and operators.</remarks>
        /// <param name="sitesSearchPostRequest"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpPost]
        [Route("/sites/search")]
        // [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SitesSearchPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SitesPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> SitesSearchPost(
            [FromBody] SitesSearchPostRequest? sitesSearchPostRequest, CancellationToken cancellationToken)
        {
            var limit = sitesSearchPostRequest?.Limit ?? 20;
            var skip = sitesSearchPostRequest?.Skip ?? 0;
            var filters = sitesSearchPostRequest?.Filters;
    
            var result = await sitesService.SearchSites(limit, skip, filters, cancellationToken);
            return Ok(result);
        }


        /// <summary>
        /// Get site by ID
        /// </summary>
        /// <param name="siteId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/sites/{siteId}")]
        // [Authorize]
        [ValidateModelState]
        [SwaggerOperation("SitesSiteIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Site), description: "Successful response")]
        public virtual async Task<IActionResult> SitesSiteIdGet([FromRoute (Name = "siteId")][Required]string siteId, CancellationToken cancellationToken)
            => Ok(await sitesService.GetSiteById(siteId, cancellationToken));
    }
}
