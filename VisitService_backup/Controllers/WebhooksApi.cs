/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WebhooksApiController : ControllerBase
    { 
        /// <summary>
        /// Get available webhook event types
        /// </summary>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/webhook-event-types")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("WebhookEventTypesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SuccessResponse), description: "Successful response")]
        public virtual async Task<IActionResult> WebhookEventTypesGet(CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SuccessResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"{}\",\n  \"success\" : true,\n  \"message\" : \"Operation completed successfully\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SuccessResponse>(exampleJson)
            : default(SuccessResponse);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get webhook logs
        /// </summary>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        /// <param name="webhookId">Filter by webhook ID</param>
        /// <param name="status">Filter by status</param>
        /// <param name="varEvent">Filter by event type</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/webhook-logs")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("WebhookLogsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookLogsPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> WebhookLogsGet([FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "webhookId")]string webhookId, [FromQuery (Name = "status")]string status, [FromQuery (Name = "event")]string varEvent, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WebhookLogsPaginated));
            string exampleJson = null;
            exampleJson = "{\n  \"pageInfo\" : {\n    \"limit\" : 1,\n    \"hasNext\" : true,\n    \"skip\" : 6,\n    \"totalCount\" : 0\n  },\n  \"items\" : [ {\n    \"eventId\" : \"eventId\",\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"webhookId\" : \"webhookId\",\n    \"data\" : \"data\",\n    \"log\" : \"log\",\n    \"_id\" : \"_id\",\n    \"event\" : \"event\",\n    \"attempt\" : 0,\n    \"status\" : \"status\"\n  }, {\n    \"eventId\" : \"eventId\",\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"webhookId\" : \"webhookId\",\n    \"data\" : \"data\",\n    \"log\" : \"log\",\n    \"_id\" : \"_id\",\n    \"event\" : \"event\",\n    \"attempt\" : 0,\n    \"status\" : \"status\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WebhookLogsPaginated>(exampleJson)
            : default(WebhookLogsPaginated);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get list of webhooks
        /// </summary>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/webhooks")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("WebhooksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Webhook>), description: "Successful response")]
        public virtual async Task<IActionResult> WebhooksGet(CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Webhook>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"active\" : true,\n  \"_id\" : \"_id\",\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\n  \"url\" : \"url\"\n}, {\n  \"active\" : true,\n  \"_id\" : \"_id\",\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\n  \"url\" : \"url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Webhook>>(exampleJson)
            : default(List<Webhook>);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Create new webhook
        /// </summary>
        /// <param name="webhookInput"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="201">Webhook created successfully</response>
        [HttpPost]
        [Route("/webhooks")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("WebhooksPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(Webhook), description: "Webhook created successfully")]
        public virtual async Task<IActionResult> WebhooksPost([FromBody]WebhookInput webhookInput, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Webhook));
            string exampleJson = null;
            exampleJson = "{\n  \"active\" : true,\n  \"_id\" : \"_id\",\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\n  \"url\" : \"url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Webhook>(exampleJson)
            : default(Webhook);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Update webhook
        /// </summary>
        /// <param name="webhookId"></param>
        /// <param name="webhookInput"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Webhook updated successfully</response>
        [HttpPut]
        [Route("/webhooks/{webhookId}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("WebhooksWebhookIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Webhook), description: "Webhook updated successfully")]
        public virtual async Task<IActionResult> WebhooksWebhookIdPut([FromRoute (Name = "webhookId")][Required]string webhookId, [FromBody]WebhookInput webhookInput, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Webhook));
            string exampleJson = null;
            exampleJson = "{\n  \"active\" : true,\n  \"_id\" : \"_id\",\n  \"eventTypes\" : [ \"eventTypes\", \"eventTypes\" ],\n  \"url\" : \"url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Webhook>(exampleJson)
            : default(Webhook);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }
    }
}
