/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BillingApiController : ControllerBase
    { 
        /// <summary>
        /// Get billable item by ID
        /// </summary>
        /// <param name="billableItemId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/billable-items/{billableItemId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("BillableItemsBillableItemIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BillableItem), description: "Successful response")]
        public virtual async Task<IActionResult> BillableItemsBillableItemIdGet([FromRoute (Name = "billableItemId")][Required]string billableItemId, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BillableItem));
            string exampleJson = null;
            exampleJson = "{\n  \"markupUnit\" : \"fix_price\",\n  \"archived\" : true,\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"taxable\" : true,\n  \"markup\" : 6.0274563,\n  \"price\" : 0.8008282,\n  \"name\" : \"name\",\n  \"active\" : true,\n  \"_id\" : \"_id\",\n  \"type\" : \"labor\",\n  \"chargeCode\" : \"chargeCode\",\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BillableItem>(exampleJson)
            : default(BillableItem);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Update billable item
        /// </summary>
        /// <param name="billableItemId"></param>
        /// <param name="billableItemInput"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Billable item updated successfully</response>
        [HttpPut]
        [Route("/billable-items/{billableItemId}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("BillableItemsBillableItemIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(BillableItem), description: "Billable item updated successfully")]
        public virtual async Task<IActionResult> BillableItemsBillableItemIdPut([FromRoute (Name = "billableItemId")][Required]string billableItemId, [FromBody]BillableItemInput billableItemInput, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BillableItem));
            string exampleJson = null;
            exampleJson = "{\n  \"markupUnit\" : \"fix_price\",\n  \"archived\" : true,\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"taxable\" : true,\n  \"markup\" : 6.0274563,\n  \"price\" : 0.8008282,\n  \"name\" : \"name\",\n  \"active\" : true,\n  \"_id\" : \"_id\",\n  \"type\" : \"labor\",\n  \"chargeCode\" : \"chargeCode\",\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BillableItem>(exampleJson)
            : default(BillableItem);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get list of billable items
        /// </summary>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        /// <param name="type">Filter by type</param>
        /// <param name="active">Filter by active status</param>
        /// <param name="archived">Filter by archived status</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/billable-items")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("BillableItemsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BillableItemsPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> BillableItemsGet([FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "type")]string type, [FromQuery (Name = "active")]bool? active, [FromQuery (Name = "archived")]bool? archived, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BillableItemsPaginated));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BillableItemsPaginated>(exampleJson)
            : default(BillableItemsPaginated);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Create new billable item
        /// </summary>
        /// <param name="billableItemInput"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="201">Billable item created successfully</response>
        [HttpPost]
        [Route("/billable-items")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("BillableItemsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(BillableItem), description: "Billable item created successfully")]
        public virtual async Task<IActionResult> BillableItemsPost([FromBody]BillableItemInput billableItemInput, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(BillableItem));
            string exampleJson = null;
            exampleJson = "{\n  \"markupUnit\" : \"fix_price\",\n  \"archived\" : true,\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"taxable\" : true,\n  \"markup\" : 6.0274563,\n  \"price\" : 0.8008282,\n  \"name\" : \"name\",\n  \"active\" : true,\n  \"_id\" : \"_id\",\n  \"type\" : \"labor\",\n  \"chargeCode\" : \"chargeCode\",\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BillableItem>(exampleJson)
            : default(BillableItem);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get charge by ID
        /// </summary>
        /// <param name="chargeId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/charges/{chargeId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ChargesChargeIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Charge), description: "Successful response")]
        public virtual async Task<IActionResult> ChargesChargeIdGet([FromRoute (Name = "chargeId")][Required]string chargeId, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Charge));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Charge>(exampleJson)
            : default(Charge);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Get list of charges
        /// </summary>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        /// <param name="status">Filter by status</param>
        /// <param name="tenantId">Filter by tenant ID</param>
        /// <param name="workOrderId">Filter by work order ID</param>
        /// <param name="createdAtFrom">Filter by creation date from</param>
        /// <param name="createdAtTo">Filter by creation date to</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/charges")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ChargesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ChargesPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> ChargesGet([FromQuery (Name = "skip")]int? skip, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "status")]string status, [FromQuery (Name = "tenantId")]string tenantId, [FromQuery (Name = "workOrderId")]string workOrderId, [FromQuery (Name = "createdAtFrom")]DateTime? createdAtFrom, [FromQuery (Name = "createdAtTo")]DateTime? createdAtTo, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ChargesPaginated));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ChargesPaginated>(exampleJson)
            : default(ChargesPaginated);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Update status of multiple charges
        /// </summary>
        /// <param name="chargesStatusPutRequest"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Charges status updated successfully</response>
        [HttpPut]
        [Route("/charges/status")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ChargesStatusPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Charge>), description: "Charges status updated successfully")]
        public virtual async Task<IActionResult> ChargesStatusPut([FromBody]ChargesStatusPutRequest chargesStatusPutRequest, CancellationToken cancellationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Charge>));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Charge>>(exampleJson)
            : default(List<Charge>);
            //TODO: Change the data returned
            return await Task.FromResult<IActionResult>(new ObjectResult(example));
        }
    }
}
