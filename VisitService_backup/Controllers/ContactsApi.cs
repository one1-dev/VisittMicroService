/*
 * Visitt Dashboard API
 *
 * API for Visitt calls and analytics in Azrieli complexes
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: benayan@one1.co.il
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using VisitService.Attributes;
using VisitService.Models;
using VisitService.Services.Interfaces;

namespace VisitService.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ContactsApiController(IContactService contactService) : ControllerBase
    { 
        /// <summary>
        /// Archive or unarchive contact
        /// </summary>
        /// <param name="contactId"></param>
        /// <param name="archive">Archive state</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Contact archive status updated</response>
        [HttpDelete]
        [Route("/contacts/{contactId}/archive")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ContactsContactIdArchiveDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Contact), description: "Contact archive status updated")]
        public virtual async Task<IActionResult> ContactsContactIdArchiveDelete([FromRoute (Name = "contactId")][Required]string contactId, [FromQuery (Name = "archive")][Required()]bool archive, CancellationToken cancellationToken)
        {
            return Ok(await contactService.DeleteContact(contactId, archive, cancellationToken));
        }

        /// <summary>
        /// Get contact by ID
        /// </summary>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpGet]
        [Route("/contacts/{contactId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ContactsContactIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Contact), description: "Successful response")]
        public virtual async Task<IActionResult> ContactsContactIdGet([FromRoute (Name = "contactId")][Required]string contactId, CancellationToken cancellationToken)
        {
            return Ok(await contactService.GetContactById(contactId, cancellationToken));
        }

        /// <summary>
        /// Update contact
        /// </summary>
        /// <param name="contactId"></param>
        /// <param name="contactInput"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Contact updated successfully</response>
        [HttpPut]
        [Route("/contacts/{contactId}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ContactsContactIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Contact), description: "Contact updated successfully")]
        public virtual async Task<IActionResult> ContactsContactIdPut([FromRoute (Name = "contactId")][Required]string contactId, [FromBody]ContactInput contactInput, CancellationToken cancellationToken)
        {
            return Ok(await contactService.UpdateContact(contactId, contactInput, cancellationToken));
        }

        /// <summary>
        /// Create new contact
        /// </summary>
        /// <param name="contactInput"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="201">Contact created successfully</response>
        /// <response code="400">Bad request</response>
        [HttpPost]
        [Route("/contacts")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ContactsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(Contact), description: "Contact created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        public virtual async Task<IActionResult> ContactsPost([FromBody]ContactInput contactInput, CancellationToken cancellationToken)
        {
            return Ok(await contactService.CreateContact(contactInput, cancellationToken));

        }

        /// <summary>
        /// Get list of contacts
        /// </summary>
        /// <param name="contactsSearchPostRequest"></param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">Successful response</response>
        [HttpPost]
        [Route("/contacts/search")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ContactsSearchPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContactsPaginated), description: "Successful response")]
        public virtual async Task<IActionResult> ContactsSearchPost([FromBody]ContactsSearchPostRequest? contactsSearchPostRequest, CancellationToken cancellationToken)
        {
            var limit = contactsSearchPostRequest?.Limit ?? 20;
            var skip = contactsSearchPostRequest?.Skip ?? 0;
            var filters = contactsSearchPostRequest?.Filters;
            return Ok(await contactService.GetContacts(limit,skip, filters, cancellationToken));
        }
    }
}
